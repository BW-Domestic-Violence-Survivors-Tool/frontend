{"version":3,"file":"utils.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\nimport React, {\n  cloneElement,\n  createContext,\n  isValidElement,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from \"react\";\nimport {\n  As,\n  AssignableRef,\n  ComponentWithAs,\n  ComponentWithForwardedRef,\n  DistributiveOmit,\n  PropsFromAs,\n  PropsWithAs\n} from \"./types\";\n\n/**\n * React currently throws a warning when using useLayoutEffect on the server.\n * To get around it, we can conditionally useEffect on the server (no-op) and\n * useLayoutEffect in the browser. We occasionally need useLayoutEffect to\n * ensure we don't get a render flash for certain operations, but we may also\n * need affected components to render on the server. One example is when setting\n * a component's descendants to retrieve their index values.\n *\n * Important to note that using this hook as an escape hatch will break the\n * eslint dependency warnings unless you rename the import to `useLayoutEffect`.\n * Use sparingly only when the effect won't effect the rendered HTML to avoid\n * any server/client mismatch.\n *\n * If a useLayoutEffect is needed and the result would create a mismatch, it's\n * likely that the component in question shouldn't be rendered on the server at\n * all, so a better approach would be to lazily render those in a parent\n * component after client-side hydration.\n *\n * TODO: We are calling useLayoutEffect in a couple of places that will likely\n * cause some issues for SSR users, whether the warning shows or not. Audit and\n * fix these.\n *\n * https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n * https://github.com/reduxjs/react-redux/blob/master/src/utils/useIsomorphicLayoutEffect.js\n *\n * @param effect\n * @param deps\n */\nexport const useIsomorphicLayoutEffect = canUseDOM()\n  ? React.useLayoutEffect\n  : React.useEffect;\n\nconst useLayoutEffect = useIsomorphicLayoutEffect;\n\nlet checkedPkgs: { [key: string]: boolean } = {};\n\n/**\n * When in dev mode, checks that styles for a given @reach package are loaded.\n *\n * @param packageName Name of the package to check.\n * @example checkStyles(\"dialog\") will check for styles for @reach/dialog\n */\n// @ts-ignore\nlet checkStyles = (packageName: string): void => {};\n\nif (__DEV__) {\n  checkStyles = (pkg: string) => {\n    // only check once per package\n    if (checkedPkgs[pkg]) return;\n    checkedPkgs[pkg] = true;\n\n    if (\n      process.env.NODE_ENV !== \"test\" &&\n      parseInt(\n        window\n          .getComputedStyle(document.body)\n          .getPropertyValue(`--reach-${pkg}`),\n        10\n      ) !== 1\n    ) {\n      console.warn(\n        `@reach/${pkg} styles not found. If you are using a bundler like webpack or parcel include this in the entry file of your app before any of your own styles:\n\n    import \"@reach/${pkg}/styles.css\";\n\n  Otherwise you'll need to include them some other way:\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"node_modules/@reach/${pkg}/styles.css\" />\n\n  For more information visit https://ui.reach.tech/styling.\n  `\n      );\n    }\n  };\n}\n\nexport { checkStyles };\n\n/**\n * Passes or assigns an arbitrary value to a ref function or object.\n *\n * @param ref\n * @param value\n */\nexport function assignRef<T = any>(\n  ref: AssignableRef<T> | undefined,\n  value: any\n) {\n  if (ref == null) return;\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else {\n    try {\n      // @ts-ignore\n      ref.current = value;\n    } catch (error) {\n      throw new Error(`Cannot assign value \"${value}\" to ref \"${ref}\"`);\n    }\n  }\n}\n\nexport function boolOrBoolString(value: any) {\n  return value === \"false\" ? false : Boolean(value);\n}\n\nexport function canUseDOM() {\n  return (\n    typeof window !== \"undefined\" &&\n    typeof window.document !== \"undefined\" &&\n    typeof window.document.createElement !== \"undefined\"\n  );\n}\n\nexport function cloneValidElement<P>(\n  element: React.ReactElement<P> | React.ReactNode,\n  props?: Partial<P> & React.Attributes,\n  ...children: React.ReactNode[]\n): React.ReactElement<P> | React.ReactNode {\n  if (!isValidElement(element)) {\n    return element;\n  }\n  return cloneElement(element, props, ...children);\n}\n\nexport function createNamedContext<T>(\n  name: string,\n  defaultValue: T\n): React.Context<T> {\n  const Ctx = createContext<T>(defaultValue);\n  Ctx.displayName = name;\n  return Ctx;\n}\n\nexport function findLastIndex<T = any>(\n  array: T[],\n  predicate: (element: T, index?: number, arr?: T[]) => boolean\n): number {\n  let length = array.length >>> 0;\n  if (!length) {\n    return -1;\n  }\n  let n = length - 1;\n  while (n >= 0) {\n    let value = array[n];\n    if (predicate(value, n, array)) {\n      return n;\n    }\n    --n;\n  }\n  return -1;\n}\n\n/**\n * Get the scrollbar offset distance.\n */\nexport function getScrollbarOffset() {\n  try {\n    if (window.innerWidth > document.documentElement.clientWidth) {\n      return window.innerWidth - document.documentElement.clientWidth;\n    }\n  } catch (err) {}\n  return 0;\n}\n\nexport function isUndefined(value: any) {\n  return typeof value === \"undefined\";\n}\n\n/**\n * Joins strings to format IDs for compound components.\n *\n * @param args\n */\nexport function makeId(...args: (string | number | null | undefined)[]) {\n  return args.filter(val => val != null).join(\"--\");\n}\n\n/**\n * No-op function.\n */\nexport function noop(): void {}\n\n// React hook for creating a value exactly once.\n// https://github.com/Andarist/use-constant\nexport function useConstant<T>(fn: () => T): T {\n  const ref = React.useRef<{ v: T }>();\n\n  if (!ref.current) {\n    ref.current = { v: fn() };\n  }\n\n  return ref.current.v;\n}\n\n/**\n * Passes or assigns a value to multiple refs (typically a DOM node). Useful for\n * dealing with components that need an explicit ref for DOM calculations but\n * also forwards refs assigned by an app.\n *\n * @param refs Refs to fork\n */\nexport function useForkedRef<T = any>(\n  ...refs: (AssignableRef<T> | undefined)[]\n) {\n  return useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return (node: any) => {\n      refs.forEach(ref => {\n        assignRef(ref, node);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}\n\n/**\n * Returns the previous value of a reference after a component update.\n *\n * @param value\n */\nexport function usePrevious<T = any>(value: T) {\n  const ref = useRef<T | null>(null);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n\n/**\n * Call an effect after a component update, skipping the initial mount.\n *\n * @param effect Effect to call\n * @param deps Effect dependency list\n */\nexport function useUpdateEffect(effect: () => any, deps?: any[]) {\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) {\n      effect();\n    } else {\n      mounted.current = true;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\n/**\n * Wraps a lib-defined event handler and a user-defined event handler, returning\n * a single handler that allows a user to prevent lib-defined handlers from\n * firing.\n *\n * @param theirHandler User-supplied event handler\n * @param ourHandler Library-supplied event handler\n */\nexport function wrapEvent<E extends React.SyntheticEvent | Event>(\n  theirHandler: ((event: E) => any) | undefined,\n  ourHandler: (event: E) => any\n): (event: E) => any {\n  return event => {\n    theirHandler && theirHandler(event);\n    if (!event.defaultPrevented) {\n      return ourHandler(event);\n    }\n  };\n}\n\n/**\n * This is a hack for sure. The thing is, getting a component to intelligently\n * infer props based on a component or JSX string passed into an `as` prop is\n * kind of a huge pain. Getting it to work and satisfy the constraints of\n * `forwardRef` seems dang near impossible. To avoid needing to do this awkward\n * type song-and-dance every time we want to forward a ref into a component\n * that accepts an `as` prop, we abstract all of that mess to this function for\n * the time time being.\n *\n * TODO: Eventually we should probably just try to get the type defs above\n * working across the board, but ain't nobody got time for that mess!\n *\n * @param Comp\n */\nexport function forwardRefWithAs<P, T extends As>(\n  comp: (props: PropsFromAs<T, P>, ref: React.RefObject<any>) => JSX.Element\n) {\n  return React.forwardRef(comp as any) as ComponentWithAs<T, P>;\n}\n\n// Export types\nexport {\n  As,\n  AssignableRef,\n  ComponentWithAs,\n  ComponentWithForwardedRef,\n  DistributiveOmit,\n  PropsFromAs,\n  PropsWithAs\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// TODO: Move to @reach/descendants once fully tested and implemented\n\nexport type Descendant<T, P = {}> = P & {\n  element: (T extends HTMLElement ? T : HTMLElement) | null;\n  index: number;\n};\n\nexport interface IDescendantContext<T, P> {\n  descendants: Descendant<T, P>[];\n  registerDescendant(descendant: Descendant<T, P>): void;\n  unregisterDescendant(\n    element: (T extends HTMLElement ? T : HTMLElement) | null\n  ): void;\n}\n\nexport function createDescendantContext<T, P = {}>(\n  name: string,\n  initialValue = {}\n) {\n  return createNamedContext(name, {\n    descendants: [],\n    registerDescendant: noop,\n    unregisterDescendant: noop,\n    ...initialValue\n  } as IDescendantContext<T, P>);\n}\n\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node and (optionally) a key. The key is useful\n * if multiple descendants have identical text values and we need to\n * differentiate siblings for some reason.\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation. However, in the few cases where\n * this is not the case, we can require an explicit index from the app.\n */\nexport function useDescendant<T, P>(\n  {\n    context,\n    element,\n    ...rest\n  }: Omit<Descendant<T, P>, \"index\"> & {\n    context: React.Context<IDescendantContext<T, P>>;\n  },\n  indexProp?: number\n) {\n  let [, forceUpdate] = useState();\n  let { registerDescendant, unregisterDescendant, descendants } = useContext(\n    context\n  );\n\n  // Prevent any flashing\n  useLayoutEffect(() => {\n    if (!element) forceUpdate({});\n    // @ts-ignore\n    registerDescendant({ element, ...rest });\n    return () => unregisterDescendant(element);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [element, ...Object.values(rest)]);\n\n  return (\n    indexProp ?? descendants.findIndex(({ element: _el }) => _el === element)\n  );\n}\n\nexport function useDescendants<T, P = {}>() {\n  return useState<Descendant<T, P>[]>([]);\n}\n\nexport function DescendantProvider<T, P>({\n  context: Ctx,\n  children,\n  items,\n  set\n}: {\n  context: React.Context<IDescendantContext<T, P>>;\n  children: React.ReactNode;\n  items: Descendant<T, P>[];\n  set: React.Dispatch<React.SetStateAction<Descendant<T, P>[]>>;\n}) {\n  let registerDescendant = React.useCallback(\n    ({ element, ...rest }: Descendant<T, P>) => {\n      if (!element) {\n        return;\n      }\n\n      set(items => {\n        if (items.find(({ element: _el }) => _el === element) == null) {\n          /*\n           * When registering a descendant, we need to make sure we insert in\n           * into the array in the same order that it appears in the DOM. So as\n           * new descendants are added or maybe some are removed, we always know\n           * that the array is up-to-date and correct.\n           *\n           * So here we look at our registered descendants and see if the new\n           * element we are adding appears earlier than an existing descendant's\n           * DOM node via `node.compareDocumentPosition`. If it does, we insert\n           * the new element at this index. Because `registerDescendant` will be\n           * called in an effect every time the descendants state value changes,\n           * we should be sure that this index is accurate when descendent\n           * elements come or go from our component.\n           */\n          let index = items.findIndex(({ element: existingElement }) => {\n            if (!existingElement || !element) {\n              return false;\n            }\n            /*\n             * Does this element's DOM node appear before another item in the\n             * array in our DOM tree? If so, return true to grab the index at\n             * this point in the array so we know where to insert the new\n             * element.\n             */\n            return Boolean(\n              existingElement.compareDocumentPosition(element) &\n                Node.DOCUMENT_POSITION_PRECEDING\n            );\n          });\n\n          let newItem = { element, index, ...rest } as Descendant<T, P>;\n\n          // If an index is not found we will push the element to the end.\n          if (index === -1) {\n            return [...items, newItem];\n          }\n          return [...items.slice(0, index), newItem, ...items.slice(index)];\n        }\n        return items;\n      });\n    },\n    /*\n     * setDescendants is a state setter initialized by the useDescendants hook.\n     * We can safely ignore the lint warning here because it will not change\n     * between renders.\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  let unregisterDescendant = useCallback(\n    (element: Descendant<T>[\"element\"]) => {\n      if (!element) {\n        return;\n      }\n\n      set(items => items.filter(({ element: _el }) => element !== _el));\n    },\n    /*\n     * setDescendants is a state setter initialized by the useDescendants hook.\n     * We can safely ignore the lint warning here because it will not change\n     * between renders.\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  // Not sure about this just yet, may bail on this and let components deal\n  /* let focusNodes = descendants\n    .filter(({ disabled }) => !disabled)\n    .map(({ element }) => element); */\n\n  // @ts-ignore\n  const value: IDescendantContext<T, P> = useMemo(() => {\n    return {\n      descendants: items,\n      registerDescendant,\n      unregisterDescendant\n    };\n  }, [items, registerDescendant, unregisterDescendant]);\n\n  return <Ctx.Provider value={value}>{children}</Ctx.Provider>;\n}\n"],"names":["useIsomorphicLayoutEffect","canUseDOM","React","useLayoutEffect","useEffect","assignRef","ref","value","current","error","Error","window","document","createElement","createNamedContext","name","defaultValue","Ctx","createContext","displayName","noop","context","children","items","set","registerDescendant","useCallback","element","rest","find","index","findIndex","existingElement","Boolean","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","newItem","slice","unregisterDescendant","filter","useMemo","descendants","Provider","packageName","props","isValidElement","cloneElement","initialValue","array","predicate","length","n","comp","forwardRef","innerWidth","documentElement","clientWidth","err","args","val","join","fn","useRef","v","indexProp","forceUpdate","useState","useContext","Object","values","refs","every","node","forEach","effect","deps","mounted","theirHandler","ourHandler","event","defaultPrevented"],"mappings":"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"}